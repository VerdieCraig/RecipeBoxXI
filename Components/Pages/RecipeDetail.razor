@page "/recipes/{RecipeId:guid}"
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;
@using Microsoft.EntityFrameworkCore;
@using RecipeBox.Models;
@using RecipeBox.DataAccess;
@using Microsoft.AspNetCore.Components.Forms;
@inject IDbContextFactory<RecipeDbContext> DbContextFactory
@inject IRecipeRepository RecipeRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h1>Recipe Detail</h1>

@if (errorMessage != null)
{
    <p style="color:red">@errorMessage</p>
}
else if (recipe == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>@recipe.Recipe_Name</h2>
    <p>@recipe.Recipe_Category</p>
    <p>Servings: @recipe.Recipe_Servings</p>
    <p>Prep Time: @recipe.Recipe_PrepTime min</p>

    <h3>Ingredients</h3>
    <p>@recipe.Recipe_Ingredients</p>

    <h3>Directions</h3>
    <p>@recipe.Recipe_Directions</p>

    <!-- Recipe Update Form -->
    <h3>Update Recipe</h3>
    <EditForm Model="@recipe" OnValidSubmit="UpdateRecipe">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Recipe_Name">Name</label>
            <InputText id="Recipe_Name" class="form-control" @bind-Value="recipe.Recipe_Name" />
        </div>

        <div class="form-group">
            <label for="Recipe_Category">Category</label>
            <InputText id="Recipe_Category" class="form-control" @bind-Value="recipe.Recipe_Category" />
        </div>

        <div class="form-group">
            <label for="Recipe_Servings">Servings</label>
            <InputNumber id="Recipe_Servings" class="form-control" @bind-Value="recipe.Recipe_Servings" />
        </div>

        <div class="form-group">
            <label for="Recipe_PrepTime">Prep Time (min)</label>
            <InputNumber id="Recipe_PrepTime" class="form-control" @bind-Value="recipe.Recipe_PrepTime" />
        </div>

        <div class="form-group">
            <label for="Recipe_Ingredients">Ingredients</label>
            <InputTextArea id="Recipe_Ingredients" class="form-control" @bind-Value="recipe.Recipe_Ingredients" />
        </div>

        <div class="form-group">
            <label for="Recipe_Directions">Directions</label>
            <InputTextArea id="Recipe_Directions" class="form-control" @bind-Value="recipe.Recipe_Directions" />
        </div>

        <button type="submit" class="btn btn-primary">Update Recipe</button>
    </EditForm>

    <!-- Delete Recipe Button -->
    <button class="btn btn-danger mt-2" @onclick="ConfirmDeleteRecipe">Delete Recipe</button>

    <!-- Navigation Button -->
    <button class="btn btn-secondary mt-2" @onclick="GoBackToRecipes">Back to Recipes</button>
}

@code {
    [Parameter]
    public Guid RecipeId { get; set; }

    private Recipe? recipe;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            recipe = await RecipeRepository.GetRecipeByIdAsync(RecipeId);

            if (recipe == null)
            {
                errorMessage = "Recipe not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task UpdateRecipe()
    {
        try
        {
            if (recipe != null)
            {
                await RecipeRepository.UpdateAsync(recipe);
                NavigationManager.NavigateTo($"/recipes/{recipe.Recipe_Id}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating recipe: {ex.Message}";
        }
    }

    private async Task ConfirmDeleteRecipe()
    {
        try
        {
            bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this recipe?" });
            if (confirm && recipe != null)
            {
                await RecipeRepository.DeleteAsync(recipe);
                NavigationManager.NavigateTo("/recipes");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting recipe: {ex.Message}";
        }
    }

    private void GoBackToRecipes()
    {
        NavigationManager.NavigateTo("/recipes");
    }
}
